// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


model User {
  id          String   @id  // Clerk user ID
  email       String   @unique
  createdAt   DateTime @default(now())
  
  workspaces  Workspace[] // Users can own multiple workspaces
  tables      Table[]     // Users can own multiple tables directly
}

model Workspace {
  id          String   @id @default(cuid())
  name        String

  createdAt   DateTime @default(now())
  ownerId     String

  owner       User     @relation(fields: [ownerId], references: [id])
  tables      Table[]
  
  @@index([ownerId])
}

model Table {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  name        String

  createdAt   DateTime @default(now())

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  columns     Column[]     
  rows        Row[]
  views       View[]

  @@index([workspaceId])
  @@index([userId])
}

model Column {
  id          String   @id @default(cuid())
  tableId     String
  type        ColumnType @default(TEXT)
  name        String  
  order       Int

  table       Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells       Cell[]

  @@unique([tableId, name])
  @@index([tableId, order])
  @@index([tableId, type])
  @@map("columns")
}

enum ColumnType {
  TEXT
  NUMBER
}

model Row {
  id          String   @id @default(cuid())
  tableId     String
  order       Int
  cells       Cell[]

  table       Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])                    // Basic table queries
  @@index([tableId, order])             // Ordered record listing

}

model Cell {
  id        String   @id @default(cuid())
  rowId     String
  columnId  String

  textValue     String?
  numberValue   Float?

  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])  
  @@index([columnId, textValue])        // Text filtering/search
  @@index([columnId, numberValue])      // Number filtering (>, <, =)
}


model View {
  id          String   @id @default(cuid())
  tableId     String
  table       Table    @relation(fields: [tableId], references: [id])
  name        String
  type        ViewType @default(GRID)
  config      Json     // JSON for view settings (filters, sort, visible columns)
  createdAt   DateTime @default(now())

  @@index([tableId])
}

enum ViewType {
  GRID
  KANBAN
}